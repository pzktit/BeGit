{"rule":"MORFOLOGIK_RULE_PL_PL","sentence":"^\\QPrymitywnym sposobem radzenia sobie z tymi problemami jest zapisywanie kolejnych wersji w osobnych katalogach (najlepiej zawierających znacznik czasu) i korzystanie z narzędzi wykrywających wprowadzone zmiany (w Linuksie takim narzędziem jest \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q).\\E$"}
{"rule":"MORFOLOGIK_RULE_PL_PL","sentence":"^\\QPrzykładem takiego narzędzia jest Revision Control System (\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q w Linuksie).\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qnieefektywne ze względu na wykorzystanie przestrzeni dyskowej,\nżmudne, bo wszystkie działania należy wykonać ręcznie, a co za tym idzie, bardzo podatne na błędy.\\E$"}
{"rule":"MORFOLOGIK_RULE_PL_PL","sentence":"^\\QDzięki swojej uniwersalności pozwala na realizację wielu przepływów pracy (ang. workflow).\\E$"}
{"rule":"MORFOLOGIK_RULE_PL_PL","sentence":"^\\QZatem systemy te mają charakterystykę niespójną z modelem rozwoju projektów Open Source, w których naczelnym motywem jest możliwość uzupełniania projektu przez dowolne, często anonimowe osoby.\\E$"}
{"rule":"MORFOLOGIK_RULE_PL_PL","sentence":"^\\QPrzykładem takiego systemu jest Subversion (\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q w Linuksie).\\E$"}
{"rule":"MORFOLOGIK_RULE_PL_PL","sentence":"^\\QCo więcej, kopia dzieła jest de facto utrzymywana wyłącznie na serwerze kontroli wersji, zatem stanowi on tzw. SPOF (ang. Single Point of Failure) — w przypadku braku kopii zapasowej awaria serwera jest równoważna utracie dzieła.\\E$"}
{"rule":"MORFOLOGIK_RULE_PL_PL","sentence":"^\\QTwórcy Git, aby dopasować go do specyfiki zarządzania projektami Open Source, zerwali z podejściem stosowanych w innych rozwiązaniach, zarówno jeśli idzie o wewnętrzną reprezentację zmian w projekcie jak i sposób zarządzania repozytoriami.\\E$"}
{"rule":"MORFOLOGIK_RULE_PL_PL","sentence":"^\\QTwórcy Git, aby dopasować go do specyfiki zarządzania projektami Open Source, zerwali z podejściem stosowanych w innych rozwiązaniach, zarówno jeśli idzie o wewnętrzną reprezentację zmian w projekcie, jak i sposób zarządzania repozytoriami.\\E$"}
{"rule":"MORFOLOGIK_RULE_PL_PL","sentence":"^\\QPliki oczekujące na rejestrację w historii zmian znajdują się w stanie \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"MORFOLOGIK_RULE_PL_PL","sentence":"^\\QProces rejestracji zmian jest nazywany \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q'em i prowadzi do zbudowania nowej nakładki (która też jest nazywana _\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q_em) oraz usunięcia plików z poczekalni \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"MORFOLOGIK_RULE_PL_PL","sentence":"^\\QKolejne \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q'y reprezentujące historię pracy nad projektem są zorganizowane w graf skierowany reprezentujący tzw. drzewo z powrotami.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qpliki zmienione przechowywane są w całości,\npliki niezmienione są linkami do plików z poprzednie wersji projektu,\nkażda nakładka otrzymuje unikalny identyfikator wyznaczony jako skrót SHA-1 z jej treści,\nkażda nakładka przechowuje Id poprzedzającej nakładki, dzięki czemu kolejność wprowadzanych modyfikacji jest ściśle określona.\\E$"}
{"rule":"MORFOLOGIK_RULE_PL_PL","sentence":"^\\Qopisać \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q,\\E$"}
{"rule":"MORFOLOGIK_RULE_PL_PL","sentence":"^\\QGałąź główna zazwyczaj nosi nazwę \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, ale to tylko kwestia konwencji, bo taką nazwę przypisuje \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q podczas inicjalizacji repozytorium, i nikomu zazwyczaj nie chce się tego zmieniać.\\E$"}
{"rule":"MORFOLOGIK_RULE_PL_PL","sentence":"^\\QZ każdą gałęzią związany jest wskaźnik (o takiej samej nazwie jak gałąź), który wskazuje bieżący \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q na danej gałęzi.\\E$"}
{"rule":"MORFOLOGIK_RULE_PL_PL","sentence":"^\\QJeżeli gałąź i \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q nie zostaną wskazane w sposób jawny, to \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q zastosuje je w miejscu określonym przez wskaźnik \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
